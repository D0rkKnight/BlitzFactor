[{"name":"tree1.js","tree":{"type":5,"rawType":"program","start":[0,0],"end":[0,10],"text":"let x = 10","children":[{"type":6,"rawType":"lexical_declaration","start":[0,0],"end":[0,10],"text":"let x = 10","children":[{"type":6,"rawType":"let","start":[0,0],"end":[0,3],"text":"let","children":[],"depth":2},{"type":6,"rawType":"variable_declarator","start":[0,4],"end":[0,10],"text":"x = 10","children":[{"type":0,"rawType":"identifier","start":[0,4],"end":[0,5],"text":"x","children":[],"depth":3},{"type":6,"rawType":"=","start":[0,6],"end":[0,7],"text":"=","children":[],"depth":3},{"type":6,"rawType":"number","start":[0,8],"end":[0,10],"text":"10","children":[],"depth":3}],"depth":2}],"depth":1}],"depth":0}},{"name":"tree2.js","tree":{"type":5,"rawType":"program","start":[0,0],"end":[2,1],"text":"function hello() {\r\n    console.log(\"Hello World\");\r\n}","children":[{"type":1,"rawType":"function_declaration","start":[0,0],"end":[2,1],"text":"function hello() {\r\n    console.log(\"Hello World\");\r\n}","children":[{"type":6,"rawType":"function","start":[0,0],"end":[0,8],"text":"function","children":[],"depth":2},{"type":0,"rawType":"identifier","start":[0,9],"end":[0,14],"text":"hello","children":[],"depth":2},{"type":2,"rawType":"formal_parameters","start":[0,14],"end":[0,16],"text":"()","children":[{"type":4,"rawType":"(","start":[0,14],"end":[0,15],"text":"(","children":[],"depth":3},{"type":4,"rawType":")","start":[0,15],"end":[0,16],"text":")","children":[],"depth":3}],"depth":2},{"type":3,"rawType":"statement_block","start":[0,17],"end":[2,1],"text":"{\r\n    console.log(\"Hello World\");\r\n}","children":[{"type":4,"rawType":"{","start":[0,17],"end":[0,18],"text":"{","children":[],"depth":3},{"type":6,"rawType":"expression_statement","start":[1,4],"end":[1,31],"text":"console.log(\"Hello World\");","children":[{"type":6,"rawType":"call_expression","start":[1,4],"end":[1,30],"text":"console.log(\"Hello World\")","children":[{"type":6,"rawType":"member_expression","start":[1,4],"end":[1,15],"text":"console.log","children":[{"type":0,"rawType":"identifier","start":[1,4],"end":[1,11],"text":"console","children":[],"depth":6},{"type":4,"rawType":".","start":[1,11],"end":[1,12],"text":".","children":[],"depth":6},{"type":6,"rawType":"property_identifier","start":[1,12],"end":[1,15],"text":"log","children":[],"depth":6}],"depth":5},{"type":6,"rawType":"arguments","start":[1,15],"end":[1,30],"text":"(\"Hello World\")","children":[{"type":4,"rawType":"(","start":[1,15],"end":[1,16],"text":"(","children":[],"depth":6},{"type":6,"rawType":"string","start":[1,16],"end":[1,29],"text":"\"Hello World\"","children":[{"type":6,"rawType":"\"","start":[1,16],"end":[1,17],"text":"\"","children":[],"depth":7},{"type":6,"rawType":"\"","start":[1,28],"end":[1,29],"text":"\"","children":[],"depth":7}],"depth":6},{"type":4,"rawType":")","start":[1,29],"end":[1,30],"text":")","children":[],"depth":6}],"depth":5}],"depth":4},{"type":4,"rawType":";","start":[1,30],"end":[1,31],"text":";","children":[],"depth":4}],"depth":3},{"type":4,"rawType":"}","start":[2,0],"end":[2,1],"text":"}","children":[],"depth":3}],"depth":2}],"depth":1}],"depth":0}},{"name":"tree3.js","tree":{"type":5,"rawType":"program","start":[0,0],"end":[48,23],"text":"// SRC: https://www.algorithms-and-technologies.com/bfs/javascript\r\n\r\n/**\r\n * Implementation of Breadth-First-Search (BFS) using adjacency matrix.\r\n * This returns nothing (yet), it is meant to be a template for whatever you want to do with it,\r\n * e.g. finding the shortest path in a unweighted graph.\r\n * This has a runtime of O(|V|^2) (|V| = number of Nodes), for a faster implementation see @see ../fast/BFS.java (using adjacency Lists)\r\n *\r\n * @param graph an adjacency-matrix-representation of the graph where (x,y) is true if the the there is an edge between nodes x and y.\r\n * @param start the node to start from.\r\n * @return Array array containing the shortest distances from the given start node to each other node\r\n */\r\nconst bfs = function (graph, start) {\r\n    //A Queue to manage the nodes that have yet to be visited\r\n    var queue = [];\r\n    //Adding the node to start from\r\n    queue.push(start);\r\n    //A boolean array indicating whether we have already visited a node\r\n    var visited = [];\r\n    //(The start node is already visited)\r\n    visited[start] = true;\r\n    // Keeping the distances (might not be necessary depending on your use case)\r\n    var distances = []; // No need to set initial values since every node is visted exactly once\r\n    //(the distance to the start node is 0)\r\n    distances[start] = 0;\r\n    //While there are nodes left to visit...\r\n    while (queue.length > 0) {\r\n        console.log(\"Visited nodes: \" + visited);\r\n        console.log(\"Distances: \" + distances);\r\n        var node = queue.shift();\r\n        console.log(\"Removing node \" + node + \" from the queue...\");\r\n        //...for all neighboring nodes that haven't been visited yet....\r\n        for (var i = 1; i < graph[node].length; i++) {\r\n            if (graph[node][i] && !visited[i]) {\r\n                // Do whatever you want to do with the node here.\r\n                // Visit it, set the distance and add it to the queue\r\n                visited[i] = true;\r\n                distances[i] = distances[node] + 1;\r\n                queue.push(i);\r\n                console.log(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\");\r\n\r\n            }\r\n        }\r\n    }\r\n    console.log(\"No more nodes in the queue. Distances: \" + distances);\r\n    return distances;\r\n};\r\n\r\nmodule.exports = {bfs};","children":[{"type":6,"rawType":"comment","start":[0,0],"end":[0,67],"text":"// SRC: https://www.algorithms-and-technologies.com/bfs/javascript\r","children":[],"depth":1},{"type":6,"rawType":"comment","start":[2,0],"end":[11,3],"text":"/**\r\n * Implementation of Breadth-First-Search (BFS) using adjacency matrix.\r\n * This returns nothing (yet), it is meant to be a template for whatever you want to do with it,\r\n * e.g. finding the shortest path in a unweighted graph.\r\n * This has a runtime of O(|V|^2) (|V| = number of Nodes), for a faster implementation see @see ../fast/BFS.java (using adjacency Lists)\r\n *\r\n * @param graph an adjacency-matrix-representation of the graph where (x,y) is true if the the there is an edge between nodes x and y.\r\n * @param start the node to start from.\r\n * @return Array array containing the shortest distances from the given start node to each other node\r\n */","children":[],"depth":1},{"type":6,"rawType":"lexical_declaration","start":[12,0],"end":[46,2],"text":"const bfs = function (graph, start) {\r\n    //A Queue to manage the nodes that have yet to be visited\r\n    var queue = [];\r\n    //Adding the node to start from\r\n    queue.push(start);\r\n    //A boolean array indicating whether we have already visited a node\r\n    var visited = [];\r\n    //(The start node is already visited)\r\n    visited[start] = true;\r\n    // Keeping the distances (might not be necessary depending on your use case)\r\n    var distances = []; // No need to set initial values since every node is visted exactly once\r\n    //(the distance to the start node is 0)\r\n    distances[start] = 0;\r\n    //While there are nodes left to visit...\r\n    while (queue.length > 0) {\r\n        console.log(\"Visited nodes: \" + visited);\r\n        console.log(\"Distances: \" + distances);\r\n        var node = queue.shift();\r\n        console.log(\"Removing node \" + node + \" from the queue...\");\r\n        //...for all neighboring nodes that haven't been visited yet....\r\n        for (var i = 1; i < graph[node].length; i++) {\r\n            if (graph[node][i] && !visited[i]) {\r\n                // Do whatever you want to do with the node here.\r\n                // Visit it, set the distance and add it to the queue\r\n                visited[i] = true;\r\n                distances[i] = distances[node] + 1;\r\n                queue.push(i);\r\n                console.log(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\");\r\n\r\n            }\r\n        }\r\n    }\r\n    console.log(\"No more nodes in the queue. Distances: \" + distances);\r\n    return distances;\r\n};","children":[{"type":6,"rawType":"const","start":[12,0],"end":[12,5],"text":"const","children":[],"depth":2},{"type":6,"rawType":"variable_declarator","start":[12,6],"end":[46,1],"text":"bfs = function (graph, start) {\r\n    //A Queue to manage the nodes that have yet to be visited\r\n    var queue = [];\r\n    //Adding the node to start from\r\n    queue.push(start);\r\n    //A boolean array indicating whether we have already visited a node\r\n    var visited = [];\r\n    //(The start node is already visited)\r\n    visited[start] = true;\r\n    // Keeping the distances (might not be necessary depending on your use case)\r\n    var distances = []; // No need to set initial values since every node is visted exactly once\r\n    //(the distance to the start node is 0)\r\n    distances[start] = 0;\r\n    //While there are nodes left to visit...\r\n    while (queue.length > 0) {\r\n        console.log(\"Visited nodes: \" + visited);\r\n        console.log(\"Distances: \" + distances);\r\n        var node = queue.shift();\r\n        console.log(\"Removing node \" + node + \" from the queue...\");\r\n        //...for all neighboring nodes that haven't been visited yet....\r\n        for (var i = 1; i < graph[node].length; i++) {\r\n            if (graph[node][i] && !visited[i]) {\r\n                // Do whatever you want to do with the node here.\r\n                // Visit it, set the distance and add it to the queue\r\n                visited[i] = true;\r\n                distances[i] = distances[node] + 1;\r\n                queue.push(i);\r\n                console.log(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\");\r\n\r\n            }\r\n        }\r\n    }\r\n    console.log(\"No more nodes in the queue. Distances: \" + distances);\r\n    return distances;\r\n}","children":[{"type":0,"rawType":"identifier","start":[12,6],"end":[12,9],"text":"bfs","children":[],"depth":3},{"type":6,"rawType":"=","start":[12,10],"end":[12,11],"text":"=","children":[],"depth":3},{"type":6,"rawType":"function","start":[12,12],"end":[46,1],"text":"function (graph, start) {\r\n    //A Queue to manage the nodes that have yet to be visited\r\n    var queue = [];\r\n    //Adding the node to start from\r\n    queue.push(start);\r\n    //A boolean array indicating whether we have already visited a node\r\n    var visited = [];\r\n    //(The start node is already visited)\r\n    visited[start] = true;\r\n    // Keeping the distances (might not be necessary depending on your use case)\r\n    var distances = []; // No need to set initial values since every node is visted exactly once\r\n    //(the distance to the start node is 0)\r\n    distances[start] = 0;\r\n    //While there are nodes left to visit...\r\n    while (queue.length > 0) {\r\n        console.log(\"Visited nodes: \" + visited);\r\n        console.log(\"Distances: \" + distances);\r\n        var node = queue.shift();\r\n        console.log(\"Removing node \" + node + \" from the queue...\");\r\n        //...for all neighboring nodes that haven't been visited yet....\r\n        for (var i = 1; i < graph[node].length; i++) {\r\n            if (graph[node][i] && !visited[i]) {\r\n                // Do whatever you want to do with the node here.\r\n                // Visit it, set the distance and add it to the queue\r\n                visited[i] = true;\r\n                distances[i] = distances[node] + 1;\r\n                queue.push(i);\r\n                console.log(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\");\r\n\r\n            }\r\n        }\r\n    }\r\n    console.log(\"No more nodes in the queue. Distances: \" + distances);\r\n    return distances;\r\n}","children":[{"type":6,"rawType":"function","start":[12,12],"end":[12,20],"text":"function","children":[],"depth":4},{"type":2,"rawType":"formal_parameters","start":[12,21],"end":[12,35],"text":"(graph, start)","children":[{"type":4,"rawType":"(","start":[12,21],"end":[12,22],"text":"(","children":[],"depth":5},{"type":0,"rawType":"identifier","start":[12,22],"end":[12,27],"text":"graph","children":[],"depth":5},{"type":4,"rawType":",","start":[12,27],"end":[12,28],"text":",","children":[],"depth":5},{"type":0,"rawType":"identifier","start":[12,29],"end":[12,34],"text":"start","children":[],"depth":5},{"type":4,"rawType":")","start":[12,34],"end":[12,35],"text":")","children":[],"depth":5}],"depth":4},{"type":3,"rawType":"statement_block","start":[12,36],"end":[46,1],"text":"{\r\n    //A Queue to manage the nodes that have yet to be visited\r\n    var queue = [];\r\n    //Adding the node to start from\r\n    queue.push(start);\r\n    //A boolean array indicating whether we have already visited a node\r\n    var visited = [];\r\n    //(The start node is already visited)\r\n    visited[start] = true;\r\n    // Keeping the distances (might not be necessary depending on your use case)\r\n    var distances = []; // No need to set initial values since every node is visted exactly once\r\n    //(the distance to the start node is 0)\r\n    distances[start] = 0;\r\n    //While there are nodes left to visit...\r\n    while (queue.length > 0) {\r\n        console.log(\"Visited nodes: \" + visited);\r\n        console.log(\"Distances: \" + distances);\r\n        var node = queue.shift();\r\n        console.log(\"Removing node \" + node + \" from the queue...\");\r\n        //...for all neighboring nodes that haven't been visited yet....\r\n        for (var i = 1; i < graph[node].length; i++) {\r\n            if (graph[node][i] && !visited[i]) {\r\n                // Do whatever you want to do with the node here.\r\n                // Visit it, set the distance and add it to the queue\r\n                visited[i] = true;\r\n                distances[i] = distances[node] + 1;\r\n                queue.push(i);\r\n                console.log(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\");\r\n\r\n            }\r\n        }\r\n    }\r\n    console.log(\"No more nodes in the queue. Distances: \" + distances);\r\n    return distances;\r\n}","children":[{"type":4,"rawType":"{","start":[12,36],"end":[12,37],"text":"{","children":[],"depth":5},{"type":6,"rawType":"comment","start":[13,4],"end":[13,62],"text":"//A Queue to manage the nodes that have yet to be visited\r","children":[],"depth":5},{"type":6,"rawType":"variable_declaration","start":[14,4],"end":[14,19],"text":"var queue = [];","children":[{"type":6,"rawType":"var","start":[14,4],"end":[14,7],"text":"var","children":[],"depth":6},{"type":6,"rawType":"variable_declarator","start":[14,8],"end":[14,18],"text":"queue = []","children":[{"type":0,"rawType":"identifier","start":[14,8],"end":[14,13],"text":"queue","children":[],"depth":7},{"type":6,"rawType":"=","start":[14,14],"end":[14,15],"text":"=","children":[],"depth":7},{"type":6,"rawType":"array","start":[14,16],"end":[14,18],"text":"[]","children":[{"type":4,"rawType":"[","start":[14,16],"end":[14,17],"text":"[","children":[],"depth":8},{"type":4,"rawType":"]","start":[14,17],"end":[14,18],"text":"]","children":[],"depth":8}],"depth":7}],"depth":6},{"type":4,"rawType":";","start":[14,18],"end":[14,19],"text":";","children":[],"depth":6}],"depth":5},{"type":6,"rawType":"comment","start":[15,4],"end":[15,36],"text":"//Adding the node to start from\r","children":[],"depth":5},{"type":6,"rawType":"expression_statement","start":[16,4],"end":[16,22],"text":"queue.push(start);","children":[{"type":6,"rawType":"call_expression","start":[16,4],"end":[16,21],"text":"queue.push(start)","children":[{"type":6,"rawType":"member_expression","start":[16,4],"end":[16,14],"text":"queue.push","children":[{"type":0,"rawType":"identifier","start":[16,4],"end":[16,9],"text":"queue","children":[],"depth":8},{"type":4,"rawType":".","start":[16,9],"end":[16,10],"text":".","children":[],"depth":8},{"type":6,"rawType":"property_identifier","start":[16,10],"end":[16,14],"text":"push","children":[],"depth":8}],"depth":7},{"type":6,"rawType":"arguments","start":[16,14],"end":[16,21],"text":"(start)","children":[{"type":4,"rawType":"(","start":[16,14],"end":[16,15],"text":"(","children":[],"depth":8},{"type":0,"rawType":"identifier","start":[16,15],"end":[16,20],"text":"start","children":[],"depth":8},{"type":4,"rawType":")","start":[16,20],"end":[16,21],"text":")","children":[],"depth":8}],"depth":7}],"depth":6},{"type":4,"rawType":";","start":[16,21],"end":[16,22],"text":";","children":[],"depth":6}],"depth":5},{"type":6,"rawType":"comment","start":[17,4],"end":[17,72],"text":"//A boolean array indicating whether we have already visited a node\r","children":[],"depth":5},{"type":6,"rawType":"variable_declaration","start":[18,4],"end":[18,21],"text":"var visited = [];","children":[{"type":6,"rawType":"var","start":[18,4],"end":[18,7],"text":"var","children":[],"depth":6},{"type":6,"rawType":"variable_declarator","start":[18,8],"end":[18,20],"text":"visited = []","children":[{"type":0,"rawType":"identifier","start":[18,8],"end":[18,15],"text":"visited","children":[],"depth":7},{"type":6,"rawType":"=","start":[18,16],"end":[18,17],"text":"=","children":[],"depth":7},{"type":6,"rawType":"array","start":[18,18],"end":[18,20],"text":"[]","children":[{"type":4,"rawType":"[","start":[18,18],"end":[18,19],"text":"[","children":[],"depth":8},{"type":4,"rawType":"]","start":[18,19],"end":[18,20],"text":"]","children":[],"depth":8}],"depth":7}],"depth":6},{"type":4,"rawType":";","start":[18,20],"end":[18,21],"text":";","children":[],"depth":6}],"depth":5},{"type":6,"rawType":"comment","start":[19,4],"end":[19,42],"text":"//(The start node is already visited)\r","children":[],"depth":5},{"type":6,"rawType":"expression_statement","start":[20,4],"end":[20,26],"text":"visited[start] = true;","children":[{"type":6,"rawType":"assignment_expression","start":[20,4],"end":[20,25],"text":"visited[start] = true","children":[{"type":6,"rawType":"subscript_expression","start":[20,4],"end":[20,18],"text":"visited[start]","children":[{"type":0,"rawType":"identifier","start":[20,4],"end":[20,11],"text":"visited","children":[],"depth":8},{"type":4,"rawType":"[","start":[20,11],"end":[20,12],"text":"[","children":[],"depth":8},{"type":0,"rawType":"identifier","start":[20,12],"end":[20,17],"text":"start","children":[],"depth":8},{"type":4,"rawType":"]","start":[20,17],"end":[20,18],"text":"]","children":[],"depth":8}],"depth":7},{"type":6,"rawType":"=","start":[20,19],"end":[20,20],"text":"=","children":[],"depth":7},{"type":6,"rawType":"true","start":[20,21],"end":[20,25],"text":"true","children":[],"depth":7}],"depth":6},{"type":4,"rawType":";","start":[20,25],"end":[20,26],"text":";","children":[],"depth":6}],"depth":5},{"type":6,"rawType":"comment","start":[21,4],"end":[21,81],"text":"// Keeping the distances (might not be necessary depending on your use case)\r","children":[],"depth":5},{"type":6,"rawType":"variable_declaration","start":[22,4],"end":[22,23],"text":"var distances = [];","children":[{"type":6,"rawType":"var","start":[22,4],"end":[22,7],"text":"var","children":[],"depth":6},{"type":6,"rawType":"variable_declarator","start":[22,8],"end":[22,22],"text":"distances = []","children":[{"type":0,"rawType":"identifier","start":[22,8],"end":[22,17],"text":"distances","children":[],"depth":7},{"type":6,"rawType":"=","start":[22,18],"end":[22,19],"text":"=","children":[],"depth":7},{"type":6,"rawType":"array","start":[22,20],"end":[22,22],"text":"[]","children":[{"type":4,"rawType":"[","start":[22,20],"end":[22,21],"text":"[","children":[],"depth":8},{"type":4,"rawType":"]","start":[22,21],"end":[22,22],"text":"]","children":[],"depth":8}],"depth":7}],"depth":6},{"type":4,"rawType":";","start":[22,22],"end":[22,23],"text":";","children":[],"depth":6}],"depth":5},{"type":6,"rawType":"comment","start":[22,24],"end":[22,97],"text":"// No need to set initial values since every node is visted exactly once\r","children":[],"depth":5},{"type":6,"rawType":"comment","start":[23,4],"end":[23,44],"text":"//(the distance to the start node is 0)\r","children":[],"depth":5},{"type":6,"rawType":"expression_statement","start":[24,4],"end":[24,25],"text":"distances[start] = 0;","children":[{"type":6,"rawType":"assignment_expression","start":[24,4],"end":[24,24],"text":"distances[start] = 0","children":[{"type":6,"rawType":"subscript_expression","start":[24,4],"end":[24,20],"text":"distances[start]","children":[{"type":0,"rawType":"identifier","start":[24,4],"end":[24,13],"text":"distances","children":[],"depth":8},{"type":4,"rawType":"[","start":[24,13],"end":[24,14],"text":"[","children":[],"depth":8},{"type":0,"rawType":"identifier","start":[24,14],"end":[24,19],"text":"start","children":[],"depth":8},{"type":4,"rawType":"]","start":[24,19],"end":[24,20],"text":"]","children":[],"depth":8}],"depth":7},{"type":6,"rawType":"=","start":[24,21],"end":[24,22],"text":"=","children":[],"depth":7},{"type":6,"rawType":"number","start":[24,23],"end":[24,24],"text":"0","children":[],"depth":7}],"depth":6},{"type":4,"rawType":";","start":[24,24],"end":[24,25],"text":";","children":[],"depth":6}],"depth":5},{"type":6,"rawType":"comment","start":[25,4],"end":[25,45],"text":"//While there are nodes left to visit...\r","children":[],"depth":5},{"type":6,"rawType":"while_statement","start":[26,4],"end":[43,5],"text":"while (queue.length > 0) {\r\n        console.log(\"Visited nodes: \" + visited);\r\n        console.log(\"Distances: \" + distances);\r\n        var node = queue.shift();\r\n        console.log(\"Removing node \" + node + \" from the queue...\");\r\n        //...for all neighboring nodes that haven't been visited yet....\r\n        for (var i = 1; i < graph[node].length; i++) {\r\n            if (graph[node][i] && !visited[i]) {\r\n                // Do whatever you want to do with the node here.\r\n                // Visit it, set the distance and add it to the queue\r\n                visited[i] = true;\r\n                distances[i] = distances[node] + 1;\r\n                queue.push(i);\r\n                console.log(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\");\r\n\r\n            }\r\n        }\r\n    }","children":[{"type":6,"rawType":"while","start":[26,4],"end":[26,9],"text":"while","children":[],"depth":6},{"type":6,"rawType":"parenthesized_expression","start":[26,10],"end":[26,28],"text":"(queue.length > 0)","children":[{"type":4,"rawType":"(","start":[26,10],"end":[26,11],"text":"(","children":[],"depth":7},{"type":6,"rawType":"binary_expression","start":[26,11],"end":[26,27],"text":"queue.length > 0","children":[{"type":6,"rawType":"member_expression","start":[26,11],"end":[26,23],"text":"queue.length","children":[{"type":0,"rawType":"identifier","start":[26,11],"end":[26,16],"text":"queue","children":[],"depth":9},{"type":4,"rawType":".","start":[26,16],"end":[26,17],"text":".","children":[],"depth":9},{"type":6,"rawType":"property_identifier","start":[26,17],"end":[26,23],"text":"length","children":[],"depth":9}],"depth":8},{"type":6,"rawType":">","start":[26,24],"end":[26,25],"text":">","children":[],"depth":8},{"type":6,"rawType":"number","start":[26,26],"end":[26,27],"text":"0","children":[],"depth":8}],"depth":7},{"type":4,"rawType":")","start":[26,27],"end":[26,28],"text":")","children":[],"depth":7}],"depth":6},{"type":3,"rawType":"statement_block","start":[26,29],"end":[43,5],"text":"{\r\n        console.log(\"Visited nodes: \" + visited);\r\n        console.log(\"Distances: \" + distances);\r\n        var node = queue.shift();\r\n        console.log(\"Removing node \" + node + \" from the queue...\");\r\n        //...for all neighboring nodes that haven't been visited yet....\r\n        for (var i = 1; i < graph[node].length; i++) {\r\n            if (graph[node][i] && !visited[i]) {\r\n                // Do whatever you want to do with the node here.\r\n                // Visit it, set the distance and add it to the queue\r\n                visited[i] = true;\r\n                distances[i] = distances[node] + 1;\r\n                queue.push(i);\r\n                console.log(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\");\r\n\r\n            }\r\n        }\r\n    }","children":[{"type":4,"rawType":"{","start":[26,29],"end":[26,30],"text":"{","children":[],"depth":7},{"type":6,"rawType":"expression_statement","start":[27,8],"end":[27,49],"text":"console.log(\"Visited nodes: \" + visited);","children":[{"type":6,"rawType":"call_expression","start":[27,8],"end":[27,48],"text":"console.log(\"Visited nodes: \" + visited)","children":[{"type":6,"rawType":"member_expression","start":[27,8],"end":[27,19],"text":"console.log","children":[{"type":0,"rawType":"identifier","start":[27,8],"end":[27,15],"text":"console","children":[],"depth":10},{"type":4,"rawType":".","start":[27,15],"end":[27,16],"text":".","children":[],"depth":10},{"type":6,"rawType":"property_identifier","start":[27,16],"end":[27,19],"text":"log","children":[],"depth":10}],"depth":9},{"type":6,"rawType":"arguments","start":[27,19],"end":[27,48],"text":"(\"Visited nodes: \" + visited)","children":[{"type":4,"rawType":"(","start":[27,19],"end":[27,20],"text":"(","children":[],"depth":10},{"type":6,"rawType":"binary_expression","start":[27,20],"end":[27,47],"text":"\"Visited nodes: \" + visited","children":[{"type":6,"rawType":"string","start":[27,20],"end":[27,37],"text":"\"Visited nodes: \"","children":[{"type":6,"rawType":"\"","start":[27,20],"end":[27,21],"text":"\"","children":[],"depth":12},{"type":6,"rawType":"\"","start":[27,36],"end":[27,37],"text":"\"","children":[],"depth":12}],"depth":11},{"type":6,"rawType":"+","start":[27,38],"end":[27,39],"text":"+","children":[],"depth":11},{"type":0,"rawType":"identifier","start":[27,40],"end":[27,47],"text":"visited","children":[],"depth":11}],"depth":10},{"type":4,"rawType":")","start":[27,47],"end":[27,48],"text":")","children":[],"depth":10}],"depth":9}],"depth":8},{"type":4,"rawType":";","start":[27,48],"end":[27,49],"text":";","children":[],"depth":8}],"depth":7},{"type":6,"rawType":"expression_statement","start":[28,8],"end":[28,47],"text":"console.log(\"Distances: \" + distances);","children":[{"type":6,"rawType":"call_expression","start":[28,8],"end":[28,46],"text":"console.log(\"Distances: \" + distances)","children":[{"type":6,"rawType":"member_expression","start":[28,8],"end":[28,19],"text":"console.log","children":[{"type":0,"rawType":"identifier","start":[28,8],"end":[28,15],"text":"console","children":[],"depth":10},{"type":4,"rawType":".","start":[28,15],"end":[28,16],"text":".","children":[],"depth":10},{"type":6,"rawType":"property_identifier","start":[28,16],"end":[28,19],"text":"log","children":[],"depth":10}],"depth":9},{"type":6,"rawType":"arguments","start":[28,19],"end":[28,46],"text":"(\"Distances: \" + distances)","children":[{"type":4,"rawType":"(","start":[28,19],"end":[28,20],"text":"(","children":[],"depth":10},{"type":6,"rawType":"binary_expression","start":[28,20],"end":[28,45],"text":"\"Distances: \" + distances","children":[{"type":6,"rawType":"string","start":[28,20],"end":[28,33],"text":"\"Distances: \"","children":[{"type":6,"rawType":"\"","start":[28,20],"end":[28,21],"text":"\"","children":[],"depth":12},{"type":6,"rawType":"\"","start":[28,32],"end":[28,33],"text":"\"","children":[],"depth":12}],"depth":11},{"type":6,"rawType":"+","start":[28,34],"end":[28,35],"text":"+","children":[],"depth":11},{"type":0,"rawType":"identifier","start":[28,36],"end":[28,45],"text":"distances","children":[],"depth":11}],"depth":10},{"type":4,"rawType":")","start":[28,45],"end":[28,46],"text":")","children":[],"depth":10}],"depth":9}],"depth":8},{"type":4,"rawType":";","start":[28,46],"end":[28,47],"text":";","children":[],"depth":8}],"depth":7},{"type":6,"rawType":"variable_declaration","start":[29,8],"end":[29,33],"text":"var node = queue.shift();","children":[{"type":6,"rawType":"var","start":[29,8],"end":[29,11],"text":"var","children":[],"depth":8},{"type":6,"rawType":"variable_declarator","start":[29,12],"end":[29,32],"text":"node = queue.shift()","children":[{"type":0,"rawType":"identifier","start":[29,12],"end":[29,16],"text":"node","children":[],"depth":9},{"type":6,"rawType":"=","start":[29,17],"end":[29,18],"text":"=","children":[],"depth":9},{"type":6,"rawType":"call_expression","start":[29,19],"end":[29,32],"text":"queue.shift()","children":[{"type":6,"rawType":"member_expression","start":[29,19],"end":[29,30],"text":"queue.shift","children":[{"type":0,"rawType":"identifier","start":[29,19],"end":[29,24],"text":"queue","children":[],"depth":11},{"type":4,"rawType":".","start":[29,24],"end":[29,25],"text":".","children":[],"depth":11},{"type":6,"rawType":"property_identifier","start":[29,25],"end":[29,30],"text":"shift","children":[],"depth":11}],"depth":10},{"type":6,"rawType":"arguments","start":[29,30],"end":[29,32],"text":"()","children":[{"type":4,"rawType":"(","start":[29,30],"end":[29,31],"text":"(","children":[],"depth":11},{"type":4,"rawType":")","start":[29,31],"end":[29,32],"text":")","children":[],"depth":11}],"depth":10}],"depth":9}],"depth":8},{"type":4,"rawType":";","start":[29,32],"end":[29,33],"text":";","children":[],"depth":8}],"depth":7},{"type":6,"rawType":"expression_statement","start":[30,8],"end":[30,68],"text":"console.log(\"Removing node \" + node + \" from the queue...\");","children":[{"type":6,"rawType":"call_expression","start":[30,8],"end":[30,67],"text":"console.log(\"Removing node \" + node + \" from the queue...\")","children":[{"type":6,"rawType":"member_expression","start":[30,8],"end":[30,19],"text":"console.log","children":[{"type":0,"rawType":"identifier","start":[30,8],"end":[30,15],"text":"console","children":[],"depth":10},{"type":4,"rawType":".","start":[30,15],"end":[30,16],"text":".","children":[],"depth":10},{"type":6,"rawType":"property_identifier","start":[30,16],"end":[30,19],"text":"log","children":[],"depth":10}],"depth":9},{"type":6,"rawType":"arguments","start":[30,19],"end":[30,67],"text":"(\"Removing node \" + node + \" from the queue...\")","children":[{"type":4,"rawType":"(","start":[30,19],"end":[30,20],"text":"(","children":[],"depth":10},{"type":6,"rawType":"binary_expression","start":[30,20],"end":[30,66],"text":"\"Removing node \" + node + \" from the queue...\"","children":[{"type":6,"rawType":"binary_expression","start":[30,20],"end":[30,43],"text":"\"Removing node \" + node","children":[{"type":6,"rawType":"string","start":[30,20],"end":[30,36],"text":"\"Removing node \"","children":[{"type":6,"rawType":"\"","start":[30,20],"end":[30,21],"text":"\"","children":[],"depth":13},{"type":6,"rawType":"\"","start":[30,35],"end":[30,36],"text":"\"","children":[],"depth":13}],"depth":12},{"type":6,"rawType":"+","start":[30,37],"end":[30,38],"text":"+","children":[],"depth":12},{"type":0,"rawType":"identifier","start":[30,39],"end":[30,43],"text":"node","children":[],"depth":12}],"depth":11},{"type":6,"rawType":"+","start":[30,44],"end":[30,45],"text":"+","children":[],"depth":11},{"type":6,"rawType":"string","start":[30,46],"end":[30,66],"text":"\" from the queue...\"","children":[{"type":6,"rawType":"\"","start":[30,46],"end":[30,47],"text":"\"","children":[],"depth":12},{"type":6,"rawType":"\"","start":[30,65],"end":[30,66],"text":"\"","children":[],"depth":12}],"depth":11}],"depth":10},{"type":4,"rawType":")","start":[30,66],"end":[30,67],"text":")","children":[],"depth":10}],"depth":9}],"depth":8},{"type":4,"rawType":";","start":[30,67],"end":[30,68],"text":";","children":[],"depth":8}],"depth":7},{"type":6,"rawType":"comment","start":[31,8],"end":[31,73],"text":"//...for all neighboring nodes that haven't been visited yet....\r","children":[],"depth":7},{"type":6,"rawType":"for_statement","start":[32,8],"end":[42,9],"text":"for (var i = 1; i < graph[node].length; i++) {\r\n            if (graph[node][i] && !visited[i]) {\r\n                // Do whatever you want to do with the node here.\r\n                // Visit it, set the distance and add it to the queue\r\n                visited[i] = true;\r\n                distances[i] = distances[node] + 1;\r\n                queue.push(i);\r\n                console.log(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\");\r\n\r\n            }\r\n        }","children":[{"type":6,"rawType":"for","start":[32,8],"end":[32,11],"text":"for","children":[],"depth":8},{"type":4,"rawType":"(","start":[32,12],"end":[32,13],"text":"(","children":[],"depth":8},{"type":6,"rawType":"variable_declaration","start":[32,13],"end":[32,23],"text":"var i = 1;","children":[{"type":6,"rawType":"var","start":[32,13],"end":[32,16],"text":"var","children":[],"depth":9},{"type":6,"rawType":"variable_declarator","start":[32,17],"end":[32,22],"text":"i = 1","children":[{"type":0,"rawType":"identifier","start":[32,17],"end":[32,18],"text":"i","children":[],"depth":10},{"type":6,"rawType":"=","start":[32,19],"end":[32,20],"text":"=","children":[],"depth":10},{"type":6,"rawType":"number","start":[32,21],"end":[32,22],"text":"1","children":[],"depth":10}],"depth":9},{"type":4,"rawType":";","start":[32,22],"end":[32,23],"text":";","children":[],"depth":9}],"depth":8},{"type":6,"rawType":"expression_statement","start":[32,24],"end":[32,47],"text":"i < graph[node].length;","children":[{"type":6,"rawType":"binary_expression","start":[32,24],"end":[32,46],"text":"i < graph[node].length","children":[{"type":0,"rawType":"identifier","start":[32,24],"end":[32,25],"text":"i","children":[],"depth":10},{"type":6,"rawType":"<","start":[32,26],"end":[32,27],"text":"<","children":[],"depth":10},{"type":6,"rawType":"member_expression","start":[32,28],"end":[32,46],"text":"graph[node].length","children":[{"type":6,"rawType":"subscript_expression","start":[32,28],"end":[32,39],"text":"graph[node]","children":[{"type":0,"rawType":"identifier","start":[32,28],"end":[32,33],"text":"graph","children":[],"depth":12},{"type":4,"rawType":"[","start":[32,33],"end":[32,34],"text":"[","children":[],"depth":12},{"type":0,"rawType":"identifier","start":[32,34],"end":[32,38],"text":"node","children":[],"depth":12},{"type":4,"rawType":"]","start":[32,38],"end":[32,39],"text":"]","children":[],"depth":12}],"depth":11},{"type":4,"rawType":".","start":[32,39],"end":[32,40],"text":".","children":[],"depth":11},{"type":6,"rawType":"property_identifier","start":[32,40],"end":[32,46],"text":"length","children":[],"depth":11}],"depth":10}],"depth":9},{"type":4,"rawType":";","start":[32,46],"end":[32,47],"text":";","children":[],"depth":9}],"depth":8},{"type":6,"rawType":"update_expression","start":[32,48],"end":[32,51],"text":"i++","children":[{"type":0,"rawType":"identifier","start":[32,48],"end":[32,49],"text":"i","children":[],"depth":9},{"type":6,"rawType":"++","start":[32,49],"end":[32,51],"text":"++","children":[],"depth":9}],"depth":8},{"type":4,"rawType":")","start":[32,51],"end":[32,52],"text":")","children":[],"depth":8},{"type":3,"rawType":"statement_block","start":[32,53],"end":[42,9],"text":"{\r\n            if (graph[node][i] && !visited[i]) {\r\n                // Do whatever you want to do with the node here.\r\n                // Visit it, set the distance and add it to the queue\r\n                visited[i] = true;\r\n                distances[i] = distances[node] + 1;\r\n                queue.push(i);\r\n                console.log(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\");\r\n\r\n            }\r\n        }","children":[{"type":4,"rawType":"{","start":[32,53],"end":[32,54],"text":"{","children":[],"depth":9},{"type":6,"rawType":"if_statement","start":[33,12],"end":[41,13],"text":"if (graph[node][i] && !visited[i]) {\r\n                // Do whatever you want to do with the node here.\r\n                // Visit it, set the distance and add it to the queue\r\n                visited[i] = true;\r\n                distances[i] = distances[node] + 1;\r\n                queue.push(i);\r\n                console.log(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\");\r\n\r\n            }","children":[{"type":6,"rawType":"if","start":[33,12],"end":[33,14],"text":"if","children":[],"depth":10},{"type":6,"rawType":"parenthesized_expression","start":[33,15],"end":[33,46],"text":"(graph[node][i] && !visited[i])","children":[{"type":4,"rawType":"(","start":[33,15],"end":[33,16],"text":"(","children":[],"depth":11},{"type":6,"rawType":"binary_expression","start":[33,16],"end":[33,45],"text":"graph[node][i] && !visited[i]","children":[{"type":6,"rawType":"subscript_expression","start":[33,16],"end":[33,30],"text":"graph[node][i]","children":[{"type":6,"rawType":"subscript_expression","start":[33,16],"end":[33,27],"text":"graph[node]","children":[{"type":0,"rawType":"identifier","start":[33,16],"end":[33,21],"text":"graph","children":[],"depth":14},{"type":4,"rawType":"[","start":[33,21],"end":[33,22],"text":"[","children":[],"depth":14},{"type":0,"rawType":"identifier","start":[33,22],"end":[33,26],"text":"node","children":[],"depth":14},{"type":4,"rawType":"]","start":[33,26],"end":[33,27],"text":"]","children":[],"depth":14}],"depth":13},{"type":4,"rawType":"[","start":[33,27],"end":[33,28],"text":"[","children":[],"depth":13},{"type":0,"rawType":"identifier","start":[33,28],"end":[33,29],"text":"i","children":[],"depth":13},{"type":4,"rawType":"]","start":[33,29],"end":[33,30],"text":"]","children":[],"depth":13}],"depth":12},{"type":6,"rawType":"&&","start":[33,31],"end":[33,33],"text":"&&","children":[],"depth":12},{"type":6,"rawType":"unary_expression","start":[33,34],"end":[33,45],"text":"!visited[i]","children":[{"type":6,"rawType":"!","start":[33,34],"end":[33,35],"text":"!","children":[],"depth":13},{"type":6,"rawType":"subscript_expression","start":[33,35],"end":[33,45],"text":"visited[i]","children":[{"type":0,"rawType":"identifier","start":[33,35],"end":[33,42],"text":"visited","children":[],"depth":14},{"type":4,"rawType":"[","start":[33,42],"end":[33,43],"text":"[","children":[],"depth":14},{"type":0,"rawType":"identifier","start":[33,43],"end":[33,44],"text":"i","children":[],"depth":14},{"type":4,"rawType":"]","start":[33,44],"end":[33,45],"text":"]","children":[],"depth":14}],"depth":13}],"depth":12}],"depth":11},{"type":4,"rawType":")","start":[33,45],"end":[33,46],"text":")","children":[],"depth":11}],"depth":10},{"type":3,"rawType":"statement_block","start":[33,47],"end":[41,13],"text":"{\r\n                // Do whatever you want to do with the node here.\r\n                // Visit it, set the distance and add it to the queue\r\n                visited[i] = true;\r\n                distances[i] = distances[node] + 1;\r\n                queue.push(i);\r\n                console.log(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\");\r\n\r\n            }","children":[{"type":4,"rawType":"{","start":[33,47],"end":[33,48],"text":"{","children":[],"depth":11},{"type":6,"rawType":"comment","start":[34,16],"end":[34,66],"text":"// Do whatever you want to do with the node here.\r","children":[],"depth":11},{"type":6,"rawType":"comment","start":[35,16],"end":[35,70],"text":"// Visit it, set the distance and add it to the queue\r","children":[],"depth":11},{"type":6,"rawType":"expression_statement","start":[36,16],"end":[36,34],"text":"visited[i] = true;","children":[{"type":6,"rawType":"assignment_expression","start":[36,16],"end":[36,33],"text":"visited[i] = true","children":[{"type":6,"rawType":"subscript_expression","start":[36,16],"end":[36,26],"text":"visited[i]","children":[{"type":0,"rawType":"identifier","start":[36,16],"end":[36,23],"text":"visited","children":[],"depth":14},{"type":4,"rawType":"[","start":[36,23],"end":[36,24],"text":"[","children":[],"depth":14},{"type":0,"rawType":"identifier","start":[36,24],"end":[36,25],"text":"i","children":[],"depth":14},{"type":4,"rawType":"]","start":[36,25],"end":[36,26],"text":"]","children":[],"depth":14}],"depth":13},{"type":6,"rawType":"=","start":[36,27],"end":[36,28],"text":"=","children":[],"depth":13},{"type":6,"rawType":"true","start":[36,29],"end":[36,33],"text":"true","children":[],"depth":13}],"depth":12},{"type":4,"rawType":";","start":[36,33],"end":[36,34],"text":";","children":[],"depth":12}],"depth":11},{"type":6,"rawType":"expression_statement","start":[37,16],"end":[37,51],"text":"distances[i] = distances[node] + 1;","children":[{"type":6,"rawType":"assignment_expression","start":[37,16],"end":[37,50],"text":"distances[i] = distances[node] + 1","children":[{"type":6,"rawType":"subscript_expression","start":[37,16],"end":[37,28],"text":"distances[i]","children":[{"type":0,"rawType":"identifier","start":[37,16],"end":[37,25],"text":"distances","children":[],"depth":14},{"type":4,"rawType":"[","start":[37,25],"end":[37,26],"text":"[","children":[],"depth":14},{"type":0,"rawType":"identifier","start":[37,26],"end":[37,27],"text":"i","children":[],"depth":14},{"type":4,"rawType":"]","start":[37,27],"end":[37,28],"text":"]","children":[],"depth":14}],"depth":13},{"type":6,"rawType":"=","start":[37,29],"end":[37,30],"text":"=","children":[],"depth":13},{"type":6,"rawType":"binary_expression","start":[37,31],"end":[37,50],"text":"distances[node] + 1","children":[{"type":6,"rawType":"subscript_expression","start":[37,31],"end":[37,46],"text":"distances[node]","children":[{"type":0,"rawType":"identifier","start":[37,31],"end":[37,40],"text":"distances","children":[],"depth":15},{"type":4,"rawType":"[","start":[37,40],"end":[37,41],"text":"[","children":[],"depth":15},{"type":0,"rawType":"identifier","start":[37,41],"end":[37,45],"text":"node","children":[],"depth":15},{"type":4,"rawType":"]","start":[37,45],"end":[37,46],"text":"]","children":[],"depth":15}],"depth":14},{"type":6,"rawType":"+","start":[37,47],"end":[37,48],"text":"+","children":[],"depth":14},{"type":6,"rawType":"number","start":[37,49],"end":[37,50],"text":"1","children":[],"depth":14}],"depth":13}],"depth":12},{"type":4,"rawType":";","start":[37,50],"end":[37,51],"text":";","children":[],"depth":12}],"depth":11},{"type":6,"rawType":"expression_statement","start":[38,16],"end":[38,30],"text":"queue.push(i);","children":[{"type":6,"rawType":"call_expression","start":[38,16],"end":[38,29],"text":"queue.push(i)","children":[{"type":6,"rawType":"member_expression","start":[38,16],"end":[38,26],"text":"queue.push","children":[{"type":0,"rawType":"identifier","start":[38,16],"end":[38,21],"text":"queue","children":[],"depth":14},{"type":4,"rawType":".","start":[38,21],"end":[38,22],"text":".","children":[],"depth":14},{"type":6,"rawType":"property_identifier","start":[38,22],"end":[38,26],"text":"push","children":[],"depth":14}],"depth":13},{"type":6,"rawType":"arguments","start":[38,26],"end":[38,29],"text":"(i)","children":[{"type":4,"rawType":"(","start":[38,26],"end":[38,27],"text":"(","children":[],"depth":14},{"type":0,"rawType":"identifier","start":[38,27],"end":[38,28],"text":"i","children":[],"depth":14},{"type":4,"rawType":")","start":[38,28],"end":[38,29],"text":")","children":[],"depth":14}],"depth":13}],"depth":12},{"type":4,"rawType":";","start":[38,29],"end":[38,30],"text":";","children":[],"depth":12}],"depth":11},{"type":6,"rawType":"expression_statement","start":[39,16],"end":[39,128],"text":"console.log(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\");","children":[{"type":6,"rawType":"call_expression","start":[39,16],"end":[39,127],"text":"console.log(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\")","children":[{"type":6,"rawType":"member_expression","start":[39,16],"end":[39,27],"text":"console.log","children":[{"type":0,"rawType":"identifier","start":[39,16],"end":[39,23],"text":"console","children":[],"depth":14},{"type":4,"rawType":".","start":[39,23],"end":[39,24],"text":".","children":[],"depth":14},{"type":6,"rawType":"property_identifier","start":[39,24],"end":[39,27],"text":"log","children":[],"depth":14}],"depth":13},{"type":6,"rawType":"arguments","start":[39,27],"end":[39,127],"text":"(\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\")","children":[{"type":4,"rawType":"(","start":[39,27],"end":[39,28],"text":"(","children":[],"depth":14},{"type":6,"rawType":"binary_expression","start":[39,28],"end":[39,126],"text":"\"Visiting node \" + i + \", setting its distance to \" + distances[i] + \" and adding it to the queue\"","children":[{"type":6,"rawType":"binary_expression","start":[39,28],"end":[39,94],"text":"\"Visiting node \" + i + \", setting its distance to \" + distances[i]","children":[{"type":6,"rawType":"binary_expression","start":[39,28],"end":[39,79],"text":"\"Visiting node \" + i + \", setting its distance to \"","children":[{"type":6,"rawType":"binary_expression","start":[39,28],"end":[39,48],"text":"\"Visiting node \" + i","children":[{"type":6,"rawType":"string","start":[39,28],"end":[39,44],"text":"\"Visiting node \"","children":[{"type":6,"rawType":"\"","start":[39,28],"end":[39,29],"text":"\"","children":[],"depth":19},{"type":6,"rawType":"\"","start":[39,43],"end":[39,44],"text":"\"","children":[],"depth":19}],"depth":18},{"type":6,"rawType":"+","start":[39,45],"end":[39,46],"text":"+","children":[],"depth":18},{"type":0,"rawType":"identifier","start":[39,47],"end":[39,48],"text":"i","children":[],"depth":18}],"depth":17},{"type":6,"rawType":"+","start":[39,49],"end":[39,50],"text":"+","children":[],"depth":17},{"type":6,"rawType":"string","start":[39,51],"end":[39,79],"text":"\", setting its distance to \"","children":[{"type":6,"rawType":"\"","start":[39,51],"end":[39,52],"text":"\"","children":[],"depth":18},{"type":6,"rawType":"\"","start":[39,78],"end":[39,79],"text":"\"","children":[],"depth":18}],"depth":17}],"depth":16},{"type":6,"rawType":"+","start":[39,80],"end":[39,81],"text":"+","children":[],"depth":16},{"type":6,"rawType":"subscript_expression","start":[39,82],"end":[39,94],"text":"distances[i]","children":[{"type":0,"rawType":"identifier","start":[39,82],"end":[39,91],"text":"distances","children":[],"depth":17},{"type":4,"rawType":"[","start":[39,91],"end":[39,92],"text":"[","children":[],"depth":17},{"type":0,"rawType":"identifier","start":[39,92],"end":[39,93],"text":"i","children":[],"depth":17},{"type":4,"rawType":"]","start":[39,93],"end":[39,94],"text":"]","children":[],"depth":17}],"depth":16}],"depth":15},{"type":6,"rawType":"+","start":[39,95],"end":[39,96],"text":"+","children":[],"depth":15},{"type":6,"rawType":"string","start":[39,97],"end":[39,126],"text":"\" and adding it to the queue\"","children":[{"type":6,"rawType":"\"","start":[39,97],"end":[39,98],"text":"\"","children":[],"depth":16},{"type":6,"rawType":"\"","start":[39,125],"end":[39,126],"text":"\"","children":[],"depth":16}],"depth":15}],"depth":14},{"type":4,"rawType":")","start":[39,126],"end":[39,127],"text":")","children":[],"depth":14}],"depth":13}],"depth":12},{"type":4,"rawType":";","start":[39,127],"end":[39,128],"text":";","children":[],"depth":12}],"depth":11},{"type":4,"rawType":"}","start":[41,12],"end":[41,13],"text":"}","children":[],"depth":11}],"depth":10}],"depth":9},{"type":4,"rawType":"}","start":[42,8],"end":[42,9],"text":"}","children":[],"depth":9}],"depth":8}],"depth":7},{"type":4,"rawType":"}","start":[43,4],"end":[43,5],"text":"}","children":[],"depth":7}],"depth":6}],"depth":5},{"type":6,"rawType":"expression_statement","start":[44,4],"end":[44,71],"text":"console.log(\"No more nodes in the queue. Distances: \" + distances);","children":[{"type":6,"rawType":"call_expression","start":[44,4],"end":[44,70],"text":"console.log(\"No more nodes in the queue. Distances: \" + distances)","children":[{"type":6,"rawType":"member_expression","start":[44,4],"end":[44,15],"text":"console.log","children":[{"type":0,"rawType":"identifier","start":[44,4],"end":[44,11],"text":"console","children":[],"depth":8},{"type":4,"rawType":".","start":[44,11],"end":[44,12],"text":".","children":[],"depth":8},{"type":6,"rawType":"property_identifier","start":[44,12],"end":[44,15],"text":"log","children":[],"depth":8}],"depth":7},{"type":6,"rawType":"arguments","start":[44,15],"end":[44,70],"text":"(\"No more nodes in the queue. Distances: \" + distances)","children":[{"type":4,"rawType":"(","start":[44,15],"end":[44,16],"text":"(","children":[],"depth":8},{"type":6,"rawType":"binary_expression","start":[44,16],"end":[44,69],"text":"\"No more nodes in the queue. Distances: \" + distances","children":[{"type":6,"rawType":"string","start":[44,16],"end":[44,57],"text":"\"No more nodes in the queue. Distances: \"","children":[{"type":6,"rawType":"\"","start":[44,16],"end":[44,17],"text":"\"","children":[],"depth":10},{"type":6,"rawType":"\"","start":[44,56],"end":[44,57],"text":"\"","children":[],"depth":10}],"depth":9},{"type":6,"rawType":"+","start":[44,58],"end":[44,59],"text":"+","children":[],"depth":9},{"type":0,"rawType":"identifier","start":[44,60],"end":[44,69],"text":"distances","children":[],"depth":9}],"depth":8},{"type":4,"rawType":")","start":[44,69],"end":[44,70],"text":")","children":[],"depth":8}],"depth":7}],"depth":6},{"type":4,"rawType":";","start":[44,70],"end":[44,71],"text":";","children":[],"depth":6}],"depth":5},{"type":6,"rawType":"return_statement","start":[45,4],"end":[45,21],"text":"return distances;","children":[{"type":6,"rawType":"return","start":[45,4],"end":[45,10],"text":"return","children":[],"depth":6},{"type":0,"rawType":"identifier","start":[45,11],"end":[45,20],"text":"distances","children":[],"depth":6},{"type":4,"rawType":";","start":[45,20],"end":[45,21],"text":";","children":[],"depth":6}],"depth":5},{"type":4,"rawType":"}","start":[46,0],"end":[46,1],"text":"}","children":[],"depth":5}],"depth":4}],"depth":3}],"depth":2},{"type":4,"rawType":";","start":[46,1],"end":[46,2],"text":";","children":[],"depth":2}],"depth":1},{"type":6,"rawType":"expression_statement","start":[48,0],"end":[48,23],"text":"module.exports = {bfs};","children":[{"type":6,"rawType":"assignment_expression","start":[48,0],"end":[48,22],"text":"module.exports = {bfs}","children":[{"type":6,"rawType":"member_expression","start":[48,0],"end":[48,14],"text":"module.exports","children":[{"type":0,"rawType":"identifier","start":[48,0],"end":[48,6],"text":"module","children":[],"depth":4},{"type":4,"rawType":".","start":[48,6],"end":[48,7],"text":".","children":[],"depth":4},{"type":6,"rawType":"property_identifier","start":[48,7],"end":[48,14],"text":"exports","children":[],"depth":4}],"depth":3},{"type":6,"rawType":"=","start":[48,15],"end":[48,16],"text":"=","children":[],"depth":3},{"type":6,"rawType":"object","start":[48,17],"end":[48,22],"text":"{bfs}","children":[{"type":4,"rawType":"{","start":[48,17],"end":[48,18],"text":"{","children":[],"depth":4},{"type":6,"rawType":"shorthand_property_identifier","start":[48,18],"end":[48,21],"text":"bfs","children":[],"depth":4},{"type":4,"rawType":"}","start":[48,21],"end":[48,22],"text":"}","children":[],"depth":4}],"depth":3}],"depth":2},{"type":4,"rawType":";","start":[48,22],"end":[48,23],"text":";","children":[],"depth":2}],"depth":1}],"depth":0}}]